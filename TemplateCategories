TemplateCategories.aspx<%@ Page Title="Categories"           Language="C#"          MasterPageFile="~/MasterPages/SiteCAWNav.Master"         AutoEventWireup="true"          CodeBehind="TemplateCategories.aspx.cs"          Inherits="EPF.Maintenance.TemplateCategories" %><asp:Content ID="Content1"             ContentPlaceHolderID="HeadContent"             runat="server">    <link href="/Styles/jquery-ui-1.8.17.custom.css"           rel="stylesheet"           type="text/css" />    <link href="/Styles/Grid.css"           rel="stylesheet"           type="text/css" />    <script language="JavaScript"            type="text/javascript"             src="../Scripts/GridView.js">    </script>    <script language="JavaScript"            type="text/javascript"             src="../Scripts/Validation.js">    </script></asp:Content><asp:Content ID="Content2"             ContentPlaceHolderID="MainContent"             runat="server">    <%--Hidden Fields--%>    <asp:HiddenField ID="hdnNewRecord"                      runat="server"                     ClientIDMode="Static" />    <asp:HiddenField ID="hdnSelectedCell"                      runat="server"                     ClientIDMode="Static" />    <h2> Maintenance - Template Category </h2>    <asp:SqlDataSource ID="sdsCategories"                        runat="server"                        ConnectionString="<%$ ConnectionStrings:CAW %>"                        DeleteCommand="Delete_Template_Categories"                        DeleteCommandType="StoredProcedure"                       OnDeleted="sdsCategories_Deleted"                        SelectCommand="Get_Template_Categories"                        SelectCommandType="StoredProcedure"                       OnSelected="sdsCategories_Selected"                       UpdateCommand="Insert_Update_Template_Categories"                        UpdateCommandType="StoredProcedure"                       OnUpdated="sdsCategories_Updated">        <DeleteParameters>            <asp:Parameter Name="Category_Id"                            Type="Int32" />        </DeleteParameters>        <SelectParameters>            <asp:ControlParameter ControlID="hdnNewRecord"                                   DefaultValue="False"                                   Name="New_Record"                                   PropertyName="Value"                                   Type="String" />        </SelectParameters>        <UpdateParameters>            <asp:Parameter Name="Category_Id" Type="Int32" />            <asp:Parameter Name="Category" Type="String" />            <asp:SessionParameter Name="Modified_By"                                   Type="String"                                   SessionField="EmplId" />        </UpdateParameters>    </asp:SqlDataSource>    <asp:GridView ID="gvCategories"                   runat="server"                   AllowPaging="True"                   AllowSorting="True"                  AutoGenerateColumns="False"                  CellPadding="4"                  ClientIDMode="Static"                                    DataSourceID="sdsCategories"                   DataKeyNames="Category_Id"                   EmptyDataText="No Data Found"                   OnPageIndexChanging="gvCategories_PageIndexChanging"                   OnRowCancelingEdit="gvCategories_RowCancelingEdit"                   OnRowCreated="gvCategories_RowCreated"                   OnRowDataBound="gvCategories_RowDataBound"                   OnRowDeleted="gvCategories_RowDeleted"                   OnRowDeleting="gvCategories_RowDeleting"                   OnRowEditing="gvCategories_RowEditing"                   OnRowUpdated="gvCategories_RowUpdated"                   OnSorting="gvCategories_Sorting"                   PagerSettings-Mode="NumericFirstLast"                   ShowHeaderWhenEmpty="True"                   PageSize="10">        <%-- GridView Columns--%>        <Columns>            <%--Delete Button--%>               <asp:CommandField ButtonType="Button"                              ItemStyle-Wrap="False"                              ShowDeleteButton="True"                               ShowEditButton="True"                                                         ShowHeader="True" />            <%--Category Name--%>            <asp:TemplateField HeaderText="Category Name"                               ControlStyle-Width="200px"                               ItemStyle-HorizontalAlign="Left"                               ItemStyle-Wrap="false"                               SortExpression="Category">                <ItemTemplate>                    <asp:Label ID="lblCategoryName"                                runat="server"                                Text='<%# Bind("Category") %>' />                </ItemTemplate>                <EditItemTemplate>                    <asp:TextBox ID="txtCategory"                                  runat="server"                                 ClientIDMode="Static"                                 Text='<%# Bind("Category") %>'                                 Width="200px" />                    <asp:RequiredFieldValidator ID="rfvCategory"                                                 runat="server"                                                ControlToValidate="txtCategory"                                                Display="Dynamic"                                                ErrorMessage="Category"                                                ForeColor="Red"                                                SetFocusOnError="true"                                                Text="*" />                </EditItemTemplate>                                           </asp:TemplateField>            <%--Database Fields--%>            <asp:BoundField DataField="Category_Id"                            HeaderStyle-CssClass="hideColumn"                            ItemStyle-CssClass="hideColumn" />                                     </Columns>            <%--GridView Styles--%>            <AlternatingRowStyle CssClass="gvAlternatingRow" />            <EditRowStyle CssClass="gvEditRow" />            <HeaderStyle CssClass="gvHeader" />            <FooterStyle CssClass="gvFooter" />            <PagerStyle CssClass="gvPager" />    </asp:GridView>            <%--Validation Summary - Displays a Message box--%>    <asp:ValidationSummary ID="ValidationSummary1"                            runat="server"                           ShowMessageBox="true"                           ShowSummary="false"                           HeaderText="Please enter the following information :" /></asp:Content>TemplateCategories.aspx.csusing System;using System.Data;using System.Web.UI.WebControls;using EPF.DataAccess;using EPF.Utilities;//------------------------------------------------------------------------------//                                    TemplateCategories.aspx.cs////      This class displays the Maintenance screen for Template Categories page// //------------------------------------------------------------------------------// //                          Modification Control Log                           //                                                                             //    Date     By                 Description                                //  --------  ---  -------------------------------------------------------------//  03-09-17  VP   Initial creation of program                               //------------------------------------------------------------------------------namespace EPF.Maintenance{    public partial class TemplateCategories : System.Web.UI.Page    {        #region Member Variables        // Module Level Variables        HRSCLogsDA _HRSCLogsDA = null;        #endregion                /// <summary>        /// Page Load        /// </summary>        protected void Page_Load(object sender, EventArgs e)        {            // Initialize the Logging Class            _HRSCLogsDA = new HRSCLogsDA();            // Check if 1st time            if (!IsPostBack)            {                //  Log the Action                string logMsg = string.Format("Categories Maintenance page was accessed by - EmplId: {0}",                                              Session["EmplId"].ToString());                _HRSCLogsDA.Insert(logMsg);            }        }        /// <summary>        /// New button Click           /// </summary>        protected void btnNew_Click(object sender, CommandEventArgs e)        {            // Set the GridView to the first page            gvCategories.PageIndex = 0;            EditFirstRow();        }                /// <summary>        /// Edit first row in the Grid        /// </summary>        private void EditFirstRow()        {               // Indicate a new record is needed            hdnNewRecord.Value = "True";            // Creating the first record of gridview to be editable            gvCategories.EditIndex = 0;            // Set the value to the selected record            hdnSelectedCell.Value = "txtCategory";        }                /// <summary>        /// gvCategories - Page Index changing        /// </summary>        protected void gvCategories_PageIndexChanging(object sender, GridViewPageEventArgs e)        {            // No new record is needed when page index changes            hdnNewRecord.Value = "False";        }                /// <summary>        /// gvCategories - Row Cancelling Edit        /// </summary>        protected void gvCategories_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)        {            // No new record is needed            hdnNewRecord.Value = "False";        }        /// <summary>        /// gvCategories - Row created        /// </summary>        protected void gvCategories_RowCreated(object sender, GridViewRowEventArgs e)        {            try            {                 // Process Header                if (e.Row.RowType == DataControlRowType.Header)                {                     // Create a New Record button                    Button btnNew = new Button();                    btnNew.ID = "btnNew";                    btnNew.Text = "Add";                    btnNew.Command += new CommandEventHandler(btnNew_Click);                    btnNew.CausesValidation = false;                    e.Row.Cells[0].Controls.Add(btnNew);                }                // Process DataRow                if (e.Row.RowType == DataControlRowType.DataRow)                {                    if (e.Row.DataItem != null)                    {                        DataRowView drv = (DataRowView)e.Row.DataItem;                        // Check for New Record                        if ((Int32)drv["Category_Id"] == 0)                        {                            // Change the Text on the Update Button to Insert for a New Record                            ((Button)e.Row.Cells[0].Controls[0]).Text = "Insert";                        }                    }                    // Check for Edit Button                    if (((Button)e.Row.Cells[0].Controls[0]).Text == "Edit")                    {                         // Hide the Edit Button                        ((Button)e.Row.Cells[0].Controls[0]).Style["display"] = "None";                    }                }            }            catch (InternalException err)            {                // Display a Messagebox                AlertMessage.Show(err.UserFriendlyMsg, this.Page);            }            catch (Exception err)            {                // Error                string errMsg = string.Format("{0} - gvCategories Row Created Error - {1}",                                              GetType().FullName,                                              err.Message);                // Log the Error                 AppLogWrapper.LogError(errMsg);                // Save a User Friendly Error Message in Session Variable                errMsg = "There was a problem creating a row in the Categories grid.  If the problem persists, please contact Technical Support.";                // Display a Messagebox                AlertMessage.Show(errMsg, this.Page);            }        }                /// <summary>        /// gvCategories - Row DataBound        /// </summary>        protected void gvCategories_RowDataBound(object sender, GridViewRowEventArgs e)        {            const string AddNewCategoryText = "Add a New Category";            const string DeleteText = "Delete";            const string UpdateText = "Update";            try            {                // Process DataRow                if (e.Row.RowType == DataControlRowType.DataRow)                {                    Button btnUpdate = (Button)e.Row.Cells[0].Controls[0];                    Button btnDelete = (Button)e.Row.Cells[0].Controls[2];                    DataRowView drv = (DataRowView)e.Row.DataItem;                    // Check for Update Button                    if (btnUpdate.Text == UpdateText)                    {                        btnUpdate.Attributes["onclick"] = "javascript:if (! confirm('Category may already be used in some Templates. Changing this value will be reflected in all requests using this value. '))" +                                                          "{return false;}";                    }                    // Check for Delete Button                    if (btnDelete.Text == DeleteText)                    {                        // Add a confirmation to the Delete Button                        btnDelete.Attributes["onclick"] = "javascript:if (! confirm('Are you sure you want to delete this Category: " + drv["Category"].ToString().Replace("'", "\\'") + "?')) " +                                                          "{if (event.preventDefault) {event.preventDefault()} else {return false;}}";                        if (drv.Row.ItemArray[1].ToString() == AddNewCategoryText)                        {                            btnDelete.Enabled = false;                        }                    }                    // Check if row is NOT in Edit mode                    if (e.Row.RowState != DataControlRowState.Edit                        && e.Row.RowState != (DataControlRowState.Edit | DataControlRowState.Alternate))                    {                        // Update each cell in the row                        for (int i = 1; i < 2; i++)                        {                            string fieldName = string.Empty;                            if (drv.Row.ItemArray[1].ToString() != AddNewCategoryText)                            {                                // Change the Background Color of the cell during Hoover                                GridFormatting.GridViewCellStyle(e.Row.Cells[i]);                                // Set OnClick event to save the Id of the cell selected                                switch (i)                                {                                    case 1:                                        fieldName = "txtCategory";                                        break;                                    default:                                        fieldName = "txtCategory";                                        break;                                }                                // Set OnClick event to save the Id of the cell selected                                e.Row.Cells[i].Attributes["onclick"] = "saveClientId('" + fieldName + "'); " + Page.ClientScript.GetPostBackClientHyperlink(gvCategories, "Edit$" + e.Row.RowIndex);                            }                        }                    }                }            }            catch (InternalException err)            {                // Display a Messagebox                AlertMessage.Show(err.UserFriendlyMsg, this.Page);            }            catch (Exception err)            {                // Error                string errMsg = string.Format("{0} - gvCategories Row Data Bound Error - {1}",                                              GetType().FullName,                                              err.Message);                // Log the Error                 AppLogWrapper.LogError(errMsg);                // Save a User Friendly Error Message in Session Variable                errMsg = "There was a problem creating a row in the Categories grid.  If the problem persists, please contact Technical Support.";                // Display a Messagebox                AlertMessage.Show(errMsg, this.Page);            }        }                /// <summary>        /// gvCategories - Row Deleted        /// </summary>        protected void gvCategories_RowDeleted(object sender, GridViewDeletedEventArgs e)        {            // No new record needed            hdnNewRecord.Value = "False";        }                /// <summary>        /// gvCategories - Row Deleting        /// </summary>        protected void gvCategories_RowDeleting(object sender, GridViewDeleteEventArgs e)        {            // Method Level Constants            const string ErrMsg = "This Category is used by a Template and cannot be deleted.";            try            {                // Define Variables                int categoryId = (int)e.Keys["Category_Id"];                int rowCount = 0;                TemplateRequestDA templateRequestDA = new TemplateRequestDA();                rowCount = templateRequestDA.GetTemplateRequestCountsByCategory(categoryId);                // Display message if Category can't be deleted because the Category Id exists in a request                if (rowCount > 0)                {                    AlertMessage.Show(ErrMsg, this.Page);                    // Cancel the Delete request                    e.Cancel = true;                }                else                {                    // Retrieve the row being deleted                    GridViewRow row = gvCategories.Rows[e.RowIndex];                    // Retrieve the controls from the row                     Label lblCategoryId = (Label)row.FindControl("lblCategoryId");                    Label lblCategory = (Label)row.FindControl("lblCategory");                    // Log the deletion                    string logMsg = string.Format("Category Deleted - Category Id: {0}, Category: {1}",                                                  categoryId.ToString(),                                                  lblCategory.Text);                    _HRSCLogsDA.Insert(logMsg);                }            }            catch (InternalException err)            {                // Display a Messagebox                AlertMessage.Show(err.UserFriendlyMsg, this.Page);            }            catch (Exception err)            {                // Error                string errMsg = string.Format("{0} - gvCategories Row Deleting Error - {1}",                                              GetType().FullName,                                              err.Message);                // Log the Error                 AppLogWrapper.LogError(errMsg);                // Save a User Friendly Error Message in Session Variable                errMsg = "There was a problem deleting a row in the Categories grid.  If the problem persists, please contact Technical Support.";                // Display a Messagebox                AlertMessage.Show(errMsg, this.Page);            }        }        /// <summary>        /// gvCategories - Row Editing          /// </summary>        protected void gvCategories_RowEditing(object sender, GridViewEditEventArgs e)        {            // Check for New Record            if (hdnNewRecord.Value == "True")            {                // No new record needed                hdnNewRecord.Value = "False";                // Adjust for removing the New Record                e.NewEditIndex = e.NewEditIndex - 1;            }        }        /// <summary>        /// gvCategories - Row Updated           /// </summary>        protected void gvCategories_RowUpdated(object sender, GridViewUpdatedEventArgs e)        {            // No new record needed            hdnNewRecord.Value = "False";            string logMsg = string.Empty;            //DropDownList ddlClassType = (DropDownList)gvMajors.Rows[gvMajors.EditIndex].FindControl("ddlClassType");            if ((int)e.Keys["Category_Id"] == 0)            {                // Log the Add                logMsg = string.Format("Category Added - Category Name: {0}", e.NewValues["Category"]);            }            else            {                // Log the Update                logMsg = string.Format("Category Updated - Category Id: {0}, Category Name: {1}/{2}",                                       e.Keys["Category_Id"].ToString(),                                       e.OldValues["Category"],                                       e.NewValues["Category"]);            }            // Update the Log            _HRSCLogsDA.Insert(logMsg);        }        /// <summary>        /// gvCategories - Sorting           /// </summary>        protected void gvCategories_Sorting(object sender, GridViewSortEventArgs e)        {            // No new record needed            hdnNewRecord.Value = "False";        }        /// <summary>        /// Handles the SqlDataSource Exceptions        /// </summary>        /// <param name="SqlDataSourceStatusEventArgs"></param>        /// <param name="SqlDataSource"></param>        /// <param name="action"></param>        private void HandleExceptions(ref SqlDataSourceStatusEventArgs e, string sds, string action)        {            // Check for an exception            if (e.Exception != null && e.Exception.InnerException != null)            {                Exception inner = e.Exception.InnerException;                string errMsg = string.Empty;                // Check for a previously handled exception                if (inner is InternalException)                {                    // Already Logged                }                else                {                    // Error                    errMsg = string.Format("{0} - {1} {2} Error - {3}",                                           GetType().FullName,                                           sds,                                           action,                                           inner.Message);                    // Log the Error                     AppLogWrapper.LogError(errMsg);                    // Display a User Friendly Error Message                    string act = string.Empty;                    switch (action)                    {                        case "Deleted":                            act = "deleting";                            break;                        case "Inserted":                            act = "inserting";                            break;                        case "Selected":                            act = "selecting";                            break;                        case "Updated":                            act = "updating";                            break;                        default:                            break;                    }                    errMsg = string.Format("There was a problem {0} a row in the Categories grid.  If the problem persists, please contact Technical Support.",                                           act);                    // Display a Messagebox                    AlertMessage.Show(errMsg, this.Page);                }                // Indicate that the exception has been handled                e.ExceptionHandled = true;            }        }        /// <summary>        /// sdsCategories - Deleted           /// </summary>        protected void sdsCategories_Deleted(object sender, SqlDataSourceStatusEventArgs e)        {            // Handle the Exception            HandleExceptions(ref e, "sdsCategories", "Deleted");        }        /// <summary>        /// sdsCategories - Selected           /// </summary>        protected void sdsCategories_Selected(object sender, SqlDataSourceStatusEventArgs e)        {            // Handle the Exception            HandleExceptions(ref e, "sdsCategories", "Selected");        }        /// <summary>        /// sdsCategories - Updated           /// </summary>        protected void sdsCategories_Updated(object sender, SqlDataSourceStatusEventArgs e)        {            // Handle the Exception            HandleExceptions(ref e, "sdsCategories", "Updated");        }    }}
