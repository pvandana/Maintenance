ASPX
<%@ Page Title="Fields" 
         Language="C#" 
         MasterPageFile="~/MasterPages/SiteCAWNav.Master" 
         AutoEventWireup="true" 
         CodeBehind="TemplateFields.aspx.cs" 
         Inherits="EPF.Maintenance.TemplateFields" %>

<asp:Content ID="Content1" 
             ContentPlaceHolderID="HeadContent" 
             runat="server">
    <link href="/Styles/jquery-ui-1.8.17.custom.css" 
          rel="stylesheet" 
          type="text/css" />
    <link href="/Styles/Grid.css" 
          rel="stylesheet" 
          type="text/css" />
    <script language="JavaScript"
            type="text/javascript" 
            src="../Scripts/GridView.js">
    </script>
    <script language="JavaScript"
            type="text/javascript" 
            src="../Scripts/Validation.js">
    </script>
</asp:Content>

<asp:Content ID="Content2" 
             ContentPlaceHolderID="MainContent" 
             runat="server">

<%--     Delete Button     --%>
    <asp:HiddenField ID="hdnNewRecord" 
                     runat="server" 
                     ClientIDMode="Static" />
    <asp:HiddenField ID="hdnSelectedCell" 
                     runat="server" 
                     ClientIDMode="Static" />

    <h2>
        Maintenance - Template Fields
    </h2>

    <asp:SqlDataSource ID="sdsMergeFields" 
                       runat="server"
                       ConnectionString="<%$ ConnectionStrings:CAW %>"
                       DeleteCommand="Delete_Merge_Fields"
                       DeleteCommandType="StoredProcedure"
                       OnDeleted="sdsMergeFields_Deleted"                      
                       SelectCommand="Get_Merge_Fields"
                       SelectCommandType="StoredProcedure"
                       OnSelected="sdsMergeFields_Selected"
                       UpdateCommand="Insert_Update_Merge_Fields"
                       UpdateCommandType="StoredProcedure"
                       OnUpdated="sdsMergeFields_Updated">

        <DeleteParameters>
            <asp:Parameter Name="Merge_Field_Id" 
                           Type="Int32" />
        </DeleteParameters>

        <SelectParameters>
            <asp:ControlParameter ControlID="hdnNewRecord" 
                                  DefaultValue="False"
                                  Name="New_Record"
                                  PropertyName="Value"
                                  Type="String" />
        </SelectParameters>

        <UpdateParameters>
            <asp:Parameter Name="Merge_Field_Id" 
                           Type="Int32" />
            <asp:Parameter Name="Merge_Field_Name" 
                            Type="String" />
            <asp:Parameter Name="Prompt" 
                            Type="String" />
            <asp:Parameter Name="Field_Type" 
                           Type="String" />			
		</UpdateParameters>
	</asp:SqlDataSource>

    <asp:GridView ID="gvMergeFields" 
                  runat="server"
                  AllowPaging="True"
                  AllowSorting="True"
                  AutoGenerateColumns="False"
                  CellPadding="4"
                  ClientIDMode="Static"
                  DataSourceID="sdsMergeFields"
                  DataKeyNames="Merge_Field_Id"
                  EmptyDataText="No Data Found"
                  OnPageIndexChanging="gvMergeFields_PageIndexChanging"
                  OnRowCancelingEdit="gvMergeFields_RowCancelingEdit"
                  OnRowCreated="gvMergeFields_RowCreated"
                  OnRowDataBound="gvMergeFields_RowDataBound"
                  OnRowDeleted="gvMergeFields_RowDeleted"
                  OnRowDeleting="gvMergeFields_RowDeleting"
                  OnRowEditing="gvMergeFields_RowEditing"
                  OnRowUpdated="gvMergeFields_RowUpdated"
                  OnSorting="gvMergeFields_Sorting" 
                  PagerSettings-Mode="NumericFirstLast"
                  ShowHeaderWhenEmpty="True">

        <%--     GridView Columns     --%>
        
        <Columns>
            <%--     Delete Button     --%>
            <asp:CommandField ButtonType="Button" 
                              ItemStyle-Wrap="False" 
                              ShowDeleteButton="True"
                              ShowEditButton="True"
                              ShowHeader="True" >
                            
            <ItemStyle Wrap="False"></ItemStyle>
            </asp:CommandField>

            <%--     Merge Field Name     --%>
            <asp:TemplateField HeaderText="Merge Field Name" 
                                ControlStyle-Width="200px" 
                                ItemStyle-HorizontalAlign="Left"
                                ItemStyle-Wrap="False"
                                SortExpression="Merge_Field_Name">
                <ItemTemplate>
                    <asp:Label ID="lblMergeFieldName" 
                               runat="server" 
                               Text='<%# Bind("Merge_Field_Name")%>' />
                </ItemTemplate>

                <EditItemTemplate>
                    <asp:TextBox ID="txtMergeFieldName" 
                                    runat="server" 
                                    ClientIDMode="Static" 
                                    Text='<%# Bind("Merge_Field_Name")%>' 
                                    Width="200px" />
                    <asp:RequiredFieldValidator ID="rfvMergeFieldName" 
                                                runat="server" 
                                                ControlToValidate="txtMergeFieldName" 
                                                Display="Dynamic" 
                                                ErrorMessage="Merge Field Name"
                                                ForeColor="Red" 
                                                SetFocusOnError="True"
                                                Text="*" />
                </EditItemTemplate>
            </asp:TemplateField>

            <%--     Prompt     --%>
            <asp:TemplateField HeaderText="Prompt" 
                                ControlStyle-Width="800px" 
                                ItemStyle-HorizontalAlign="Left"
                                ItemStyle-Wrap="False"
                                SortExpression="Prompt">
                <ItemTemplate>
                    <asp:Label ID="lblPrompt" 
                               runat="server" 
                               Text='<%# Bind("Prompt")%>' />
                </ItemTemplate>

                <EditItemTemplate>
                    <asp:TextBox ID="txtPrompt" 
                                    runat="server" 
                                    ClientIDMode="Static" 
                                    Text='<%# Bind("Prompt")%>' 
                                    Width="800px" />
                    <asp:RequiredFieldValidator ID="rfvPrompt" 
                                                runat="server" 
                                                ControlToValidate="txtPrompt" 
                                                Display="Dynamic" 
                                                ErrorMessage="Prompt"
                                                ForeColor="Red" 
                                                SetFocusOnError="True"
                                                Text="*" />
                </EditItemTemplate>
            </asp:TemplateField>

            <%--     Field Type     --%>
            <asp:TemplateField HeaderText="Field Type" 
                               ControlStyle-Width="150px" 
                               ItemStyle-HorizontalAlign="Left"
                               ItemStyle-Wrap="False"
                               SortExpression="Field_Type">
                <ItemTemplate>
                    <asp:Label ID="lblFieldType" 
                               runat="server" 
                               Text='<%# Bind("Field_Type")%>' />
                              
                </ItemTemplate>

                <EditItemTemplate>
                    <asp:SqlDataSource ID="sdsFieldType"
                                       runat="server"
                                       ConnectionString="<%$ ConnectionStrings:CAW %>"
                                       OnSelected="sdsFieldType_Selected"
                                       SelectCommand="Get_FieldType_MergeFields"
                                       SelectCommandType="StoredProcedure" >
                    </asp:SqlDataSource>

                    <asp:DropDownList ID="ddlFieldType" 
                                      runat="server" 
                                      DataSourceID="sdsFieldType" 
                                      DataTextField="Field_Type" 
                                      DataValueField="Field_Type" 
                                      SelectedValue='<%# Bind("Field_Type")%>'/>
                                      
                </EditItemTemplate>
            </asp:TemplateField>
        </Columns>

        <%--     GridView Styles     --%>
        <AlternatingRowStyle CssClass="gvAlternatingRow" />                    
        <EditRowStyle CssClass="gvEditRow" />
        <FooterStyle CssClass="gvFooter" />
        <HeaderStyle CssClass="gvHeader" />
        <PagerSettings Mode="NumericFirstLast"></PagerSettings>
        <PagerStyle CssClass="gvPager" />
    </asp:GridView>

    <%--     Validation Summary - Displays a Message box     --%>
    <asp:ValidationSummary ID="ValidationSummary1" 
                            runat="server" 
                            ShowMessageBox="True" 
                            ShowSummary="False" 
                            HeaderText="Please enter the following information:" />
                            
</asp:Content>


using System;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Web.UI.WebControls;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;
using EPF.DataAccess;
using EPF.Utilities;

//------------------------------------------------------------------------------
//                                    TemplateFields.aspx.cs
//
//      This class displays the Maintenance screen for Template Fields
// 
//------------------------------------------------------------------------------
// 
//                          Modification Control Log                           
//                                                                             
//    Date     By                 Description                                
//  --------  ---  -------------------------------------------------------------
//  03-21-17  VP   Initial creation of program                               
// 
//------------------------------------------------------------------------------

namespace EPF.Maintenance
{
    public partial class TemplateFields : System.Web.UI.Page
    {
        #region Member Variables

        // Module Level Variables
        HRSCLogsDA _HRSCLogsDA = null;

        #endregion

        /// <summary>
        /// Page Load   
        /// </summary>
        protected void Page_Load(object sender, EventArgs e)
        {
            // Initialize the Logging Class
            _HRSCLogsDA = new HRSCLogsDA();

            // Check if 1st time
            if (!IsPostBack)
            {
                //  Log the Action
                string logMsg = string.Format("Template Fields Maintenance screen was accessed by - EmplId: {0}",
                                              Session["EmplId"].ToString());
                _HRSCLogsDA.Insert(logMsg);
            }
        }

        /// <summary>
        /// New button Click   
        /// </summary>
        protected void btnNew_Click(object sender, CommandEventArgs e)
        {
            // Set the GridView to the first page
            gvMergeFields.PageIndex = 0;

            EditFirstRow();
        }

        /// <summary>
        /// Edit First Row in the Grid   
        /// </summary>
        private void EditFirstRow()
        {
            // Inidicate a new record is needed
            hdnNewRecord.Value = "True";

            // Creating the first row of GridView to be Editable
            gvMergeFields.EditIndex = 0;

            // Set the focus to this field
            hdnSelectedCell.Value = "txtMergeFieldName";
            hdnSelectedCell.Value = "txtPrompt";
            hdnSelectedCell.Value = "ddlFieldType";
        }

        /// <summary>
        /// gvMergeFields - Page Index Changing   
        /// </summary>
        protected void gvMergeFields_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            // No new record needed
            hdnNewRecord.Value = "False";
        }

        /// <summary>
        /// gvMergeFields - Row Canceling Edit   
        /// </summary>
        protected void gvMergeFields_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        {
            // No new record needed
            hdnNewRecord.Value = "False";
        }

　
        /// <summary>
        /// gvMergeFields - Row Created   
        /// </summary>
        protected void gvMergeFields_RowCreated(object sender, GridViewRowEventArgs e)
        {
            try
            {
                // Process Header
                if (e.Row.RowType == DataControlRowType.Header)
                {
                    // Create a New Record button
                    Button btnNew = new Button();
                    btnNew.ID = "btnNew";
                    btnNew.Text = "Add";
                    //btnNew.OnClientClick = "$('#hdnNewRecord').val('True');";
                    btnNew.Command += new CommandEventHandler(btnNew_Click);
                    btnNew.CausesValidation = false;
                    e.Row.Cells[0].Controls.Add(btnNew);
                }

                // Process DataRow
                if (e.Row.RowType == DataControlRowType.DataRow)
                {
                    if (e.Row.DataItem != null)
                    {
                        DataRowView drv = (DataRowView)e.Row.DataItem;

                        // Check for New Record
                        if ((Int32)drv["Merge_Field_Id"] == 0)
                        {
                            // Change the Text on the Update Button to Insert for a New Record
                            ((Button)e.Row.Cells[0].Controls[0]).Text = "Insert";
                        }
                    }

                    // Check for Edit Button
                    if (((Button)e.Row.Cells[0].Controls[0]).Text == "Edit")
                    {
                        // Hide the Edit Button
                        ((Button)e.Row.Cells[0].Controls[0]).Style["display"] = "None";
                    }
                }
            }
            catch (InternalException err)
            {
                // Display a Messagebox
                AlertMessage.Show(err.UserFriendlyMsg, this.Page);
            }
            catch (Exception err)
            {
                // Error
                string errMsg = string.Format("{0} - gvMergeFields Row Created Error - {1}",
                                              GetType().FullName,
                                              err.Message);

                // Log the Error 
                AppLogWrapper.LogError(errMsg);

                // Save a User Friendly Error Message in Session Variable
                errMsg = "There was a problem creating a row in the Merge Fields grid.  If the problem persists, please contact Technical Support.";

                // Display a Messagebox
                AlertMessage.Show(errMsg, this.Page);
            }
        }

　
        /// <summary>
        /// gvMergeFields - Row DataBound   
        /// </summary>
        protected void gvMergeFields_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            const string AddNewMergeFieldText = "Add a New Merge Field";
            const string DeleteText = "Delete";
            const string UpdateText = "Update";

            try
            {
                // Process DataRow
                if (e.Row.RowType == DataControlRowType.DataRow)
                {
                    Button btnUpdate = (Button)e.Row.Cells[0].Controls[0];
                    Button btnDelete = (Button)e.Row.Cells[0].Controls[2];
                    DataRowView drv = (DataRowView)e.Row.DataItem;

                    // Check for Update Button
                    if (btnUpdate.Text == UpdateText)
                    {
                        btnUpdate.Attributes["onclick"] = "javascript:if (! confirm('Merge Field may already be used in some other Templates. Changing this value will be reflected in all requests using this value. '))" +
                                                          "{return false;}";
                    }

                    // Check for Delete Button
                    if (btnDelete.Text == DeleteText)
                    {
                        // Add a confirmation to the Delete Button
                         btnDelete.Attributes["onclick"] = "javascript:if (! confirm('Are you sure you want to delete this Merge Field: " + drv["Merge_Field_Name"].ToString().Replace("'", "\\'") + " " +
                                                  drv["Prompt"].ToString().Replace("'", "\\'") + ", " + drv["Field_Type"] + "?')) " + "{return false;}";

                         if (drv.Row.ItemArray[1].ToString() == AddNewMergeFieldText)
                         {
                             btnDelete.Enabled = false;
                         }
                    }

                    // Check if row is NOT in Edit mode
                    if (e.Row.RowState != DataControlRowState.Edit
                        && e.Row.RowState != (DataControlRowState.Edit | DataControlRowState.Alternate))
                    {
                        // Update each cell in the row
                        for (int i = 1; i < 4; i++)
                        {
                            string fieldName = string.Empty;

                            if (drv.Row.ItemArray[1].ToString() != AddNewMergeFieldText)
                            {
                                // Change the Background Color of the cell during Hoover
                                GridFormatting.GridViewCellStyle(e.Row.Cells[i]);
                                
                                // Set OnClick event to save the Id of the cell selected
                                switch (i)
                                {
                                    case 1:
                                        fieldName = "txtMergeFieldName";
                                        break;

                                    case 2:
                                        fieldName = "txtPrompt";
                                        break;

                                    case 3:
                                        fieldName = "ddlFieldType";
                                        break;

                                    default:
                                        fieldName = "txtMergeFieldName";
                                        break;
                                }

                                // Set OnClick event to save the Id of the cell selected
                                e.Row.Cells[i].Attributes["onclick"] = "saveClientId('" + fieldName + "'); " + Page.ClientScript.GetPostBackClientHyperlink(gvMergeFields, "Edit$" + e.Row.RowIndex);
                            }
                        }
                    }
                }
            }
            catch (InternalException err)
            {
                // Display a Messagebox
                AlertMessage.Show(err.UserFriendlyMsg, this.Page);
            }
            catch (Exception err)
            {
                // Error
                string errMsg = string.Format("{0} - gvMergeFields Row Data Bound Error - {1}",
                                              GetType().FullName,
                                              err.Message);

                // Log the Error 
                AppLogWrapper.LogError(errMsg);

                // Save a User Friendly Error Message in Session Variable
                errMsg = "There was a problem creating a row in the Merge Fields grid.  If the problem persists, please contact Technical Support.";

                // Display a Messagebox
                AlertMessage.Show(errMsg, this.Page);
            }
        }

        /// <summary>
        /// gvMergeFields - Row Deleted   
        /// </summary>
        protected void gvMergeFields_RowDeleted(object sender, GridViewDeletedEventArgs e)
        {
            // No new record needed
            hdnNewRecord.Value = "False";
        }

　
        /// <summary>
        /// gvMergeFields - Row Deleting   
        /// </summary>
        protected void gvMergeFields_RowDeleting(object sender, GridViewDeleteEventArgs e)
        {
            // Method Level Constants
            const string ErrMsg = "This Merge Field is used by a Template and cannot be deleted.";

            try
            {
                // Define Variables
                int mergeFieldId = (int)e.Keys["Merge_Field_Id"];
                int rowCount = 0;

                TemplateRequestDA templateRequestDA = new TemplateRequestDA();
                rowCount = templateRequestDA.GetTemplateRequestCountsByMergeField(mergeFieldId);

                // Display message if merge field can't be deleted because the Merge Field Id exists in a request
                if (rowCount > 0)
                {
                    AlertMessage.Show(ErrMsg, this.Page);

                    // Cancel the Delete request
                    e.Cancel = true;
                }
                else
                {
                    // Retrieve the row being deleted
                    GridViewRow row = gvMergeFields.Rows[e.RowIndex];

                    // Retrieve the controls from the row 
                    Label lblMergeFieldName = (Label)row.FindControl("lblMergeFieldName");
                    Label lblPrompt = (Label)row.FindControl("lblPrompt");
                    Label lblFieldType = (Label)row.FindControl("lblFieldType");
                   

                    // Log the deletion
                    string logMsg = string.Format("Merge Field Deleted - Merge Field Id: {0}, Merge Field Name: {1}, Prompt: {2}, Field Type: {3}",
                                                  mergeFieldId.ToString(),
                                                  lblMergeFieldName.Text,
                                                  lblPrompt.Text,
                                                  lblFieldType.Text);
                    _HRSCLogsDA.Insert(logMsg);
                }
            }
            catch (InternalException err)
            {
                // Display a Messagebox
                AlertMessage.Show(err.UserFriendlyMsg, this.Page);
            }
            catch (Exception err)
            {
                // Error
                string errMsg = string.Format("{0} - gvMergeFields Row Deleting Error - {1}",
                                              GetType().FullName,
                                              err.Message);

                // Log the Error 
                AppLogWrapper.LogError(errMsg);

                // Save a User Friendly Error Message in Session Variable
                errMsg = "There was a problem deleting a row in the Merge Fields grid.  If the problem persists, please contact Technical Support.";

                // Display a Messagebox
                AlertMessage.Show(errMsg, this.Page);
            }
        }

        /// <summary>
        /// gvMergeFields - Row Editing  
        /// </summary>
        protected void gvMergeFields_RowEditing(object sender, GridViewEditEventArgs e)
        {
            // Check for New Record
            if (hdnNewRecord.Value == "True")
            {
                // No new record needed
                hdnNewRecord.Value = "False";

                // Adjust for removing the New Record
                e.NewEditIndex = e.NewEditIndex - 1;
            }
        }

　
        /// <summary>
        /// gvMergeFields - Row Updated   
        /// </summary>
        protected void gvMergeFields_RowUpdated(object sender, GridViewUpdatedEventArgs e)
        {
            // No new record needed
            hdnNewRecord.Value = "False";
            string logMsg = string.Empty;
            DropDownList ddlFieldType = (DropDownList)gvMergeFields.Rows[gvMergeFields.EditIndex].FindControl("ddlFieldType");

            if ((int)e.Keys["Merge_Field_Id"] == 0)
            {
                // Log the Add
                logMsg = string.Format("Merge Field Added - Merge Field Name: {0}, Prompt: {1}, Field Type: {2} - {3}",
                                       e.NewValues["Merge_Field_Name"],
                                       e.NewValues["Prompt"],
                                       e.NewValues["Field_Type"],
                                       ddlFieldType.SelectedItem.Text);
            }
            else
            {
                // Log the Update
                logMsg = string.Format("Merge Field Updated - Merge Field Id: {0}, Merge Field Name: {1}/{2}, Prompt: {3}/{4}, Field Type: {5}/{6} - {7}",
                                       e.Keys["Merge_Field_Id"].ToString(),
                                       e.OldValues["Merge_Field_Name"],
                                       e.NewValues["Merge_Field_Name"],
                                       e.OldValues["Prompt"],
                                       e.NewValues["Prompt"],
                                       e.OldValues["Field_Type"],
                                       e.NewValues["Field_Type"],
                                       ddlFieldType.SelectedItem.Text);
            }

            // Update the Log
            _HRSCLogsDA.Insert(logMsg);
        }

        /// <summary>
        /// gvMergeFields - Sorting   
        /// </summary>
        protected void gvMergeFields_Sorting(object sender, GridViewSortEventArgs e)
        {
            // No new record needed
            hdnNewRecord.Value = "False";
        }

　
        /// <summary>
        /// Handles the SqlDataSource Exceptions
        /// </summary>
        /// <param name="SqlDataSourceStatusEventArgs"></param>
        /// <param name="SqlDataSource"></param>
        /// <param name="action"></param>
        private void HandleExceptions(ref SqlDataSourceStatusEventArgs e, string sds, string action)
        {
            // Check for an exception
            if (e.Exception != null
                && e.Exception.InnerException != null)
            {
                Exception inner = e.Exception.InnerException;
                string errMsg = string.Empty;

                // Check for a previously handled exception
                if (inner is InternalException)
                {
                    // Already Logged
                }
                else
                {
                    // Error
                    errMsg = string.Format("{0} - {1} {2} Error - {3}",
                                           GetType().FullName,
                                           sds,
                                           action,
                                           inner.Message);

                    // Log the Error 
                    AppLogWrapper.LogError(errMsg);

                    // Display a User Friendly Error Message
                    string act = string.Empty;

                    switch (action)
                    {
                        case "Deleted":
                            act = "deleting";
                            break;

                        case "Inserted":
                            act = "inserting";
                            break;

                        case "Selected":
                            act = "selecting";
                            break;

                        case "Updated":
                            act = "updating";
                            break;

                        default:
                            break;
                    }

                    errMsg = string.Format("There was a problem {0} a row in the Merge Fields grid.  If the problem persists, please contact Technical Support.",
                                           act);

                    // Display a Messagebox
                    AlertMessage.Show(errMsg, this.Page);
                }

                // Indicate that the exception has been handled
                e.ExceptionHandled = true;
            }
        }

　
        /// <summary>
        /// sdsFieldType - Selected   
        /// </summary>
        protected void sdsFieldType_Selected(object sender, SqlDataSourceStatusEventArgs e)
        {
            // Handle the Exception
            HandleExceptions(ref e, "sdsFieldType", "Selected");
        }

        
        /// <summary>
        /// sdsMergeFields - Deleted   
        /// </summary>
        protected void sdsMergeFields_Deleted(object sender, SqlDataSourceStatusEventArgs e)
        {
            // Handle the Exception
            HandleExceptions(ref e, "sdsMergeFields", "Deleted");
        }

        /// <summary>
        /// sdsMergeFields - Selected   
        /// </summary>
        protected void sdsMergeFields_Selected(object sender, SqlDataSourceStatusEventArgs e)
        {
            // Handle the Exception
            HandleExceptions(ref e, "sdsMergeFields", "Selected");
        }

        /// <summary>
        /// sdsMergeFields - Updated   
        /// </summary>
        protected void sdsMergeFields_Updated(object sender, SqlDataSourceStatusEventArgs e)
        {
            // Handle the Exception
            HandleExceptions(ref e, "sdsMergeFields", "Updated");
        }

    }
}
